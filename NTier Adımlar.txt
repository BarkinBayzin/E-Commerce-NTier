
-- Core --

Referanslar = Entity Framework (NuGet)
1)NTier.Core isimli bir C# Library açýyoruz.
1.1)Bu kütüphane içerisinde Entity, Map ve Service klasörlerini yerleþtiriyoruz.
1.2.1)Entity içerisine Enum klasörü açýyoruz, Statüleri enum olarak yerleþtiriyoruz.
1.2.2)IEntity interface oluþturuyoruz. ID tanýmlamasý yapýyoruz.
1.2.3)CoreEntity classý oluþturuyoruz. Ortak tüm proplarý yazýp ctor içerisinde ön tanýmlama yapýyoruz.
1.3)Map Sýnýný yazýyoruz ve CoreEntity içerisinde var olan tüm proplarýn mapleme iþlemini "Fluent Api" kullanarak gerçekleþtiriyoruz.
1.4)Service içerisine veritabaný üzerinde gerçekleþtirilecek olan iþlemlerimizi içeren metotlarý ekliyoruz.

-- Model --

Referanlar = NTier.Core, EntityFramework(NuGet)
1)NTier.Model isimli bir C# Library açýyoruz.
1.1)Kütüphane içerisine Context, Entities, Map klasörleri açýyoruz.
1.2)Entities klasöründe AppUser,Category,OrderDetails,Orders,SubCategory sýnýflarýný açýyoruz.
1.3)Maps klasöründe tüm entitylerin mapleme iþlemlerini gerçekleþtiriyoruz. CoreMap sýnýfýndan miras olarak ortak propertler ekleniyor.
1.4)Context klasörü içerisinde ProjectContext sýnýfýný açýyorz.
1.4.1)Sýnýf içerisinde onModelCreating methodunu override ediyoruz ve yazmýþ olduðumuz map sýnýfýlarýnýn konfigürasyonlara ekliyoruz.
1.4.2)DbSetleri tanýmlýyoruz.
1.4.3)SaveChanges methodunu override ediyoruz. Bu sayede güncellenen ve yenmi eklenen tüm entity'ler otomatik olarak bazý sütunlarýna deðerleri alýyor.(CreatedMachineName veya ModifiedDate gibi..)
1.5)enable-migrations -enableAutomaticMigrations ile console üzerinden migrate ediyoruz. Update-database yapýyoruz.

-- Service --

Referanslar = NTier.Core, NTier.Model, EntityFrameWork(NuGet)
1)NTier.Service isimli bir C# Library açýyoruz.
1.1)Kütüphane içerisine Base ve Option isimli iki klasör oluþturuyoruz.
1.2)Base içerisine BaseService sýnfýný açýyoruz. Bu sýnýf içerisine ICoreService üzerinde tanýmlanmýþ olan tüm methodlarýn gövdelerini ekliyoruz.
1.3)Option klasörü içerisine tüm entityleri service olarak açýyoruz. Entity'e özel metotlarý varsa eðer ekliyoruz.

-- UI --

Referanslar = NTier.Core, NTier.Model, NTier.Service, EntityFramework(NuGet)
1)Proje içerisine layout oluþturuyoruz.
2)Partial View oluþturarak Kategori menüsünü layout içerisine ekliyoruz.
(HomeController içerisindeki [ChildActionOnly] bu attribute partialView için _CategoryLis menüyü içermektedir.)
3)ProductController ile Ürün listeleme metotlarýmýzý oluþturyoruz.
4)Sepete ekleme iþlemleri için Cart sýnýfýný Models altýna ekliyoruz.(Session örneðindeki sepet iþlemlerinin aynýsýný ekliyoruz.)
-Bazý sayfalarda "Regex'ler" anlatým için eklenmiþtir. Kaynaklarý internetten bulunabilir.

-- UI/Admin(AREA)

1)Proje içerisine Admin Area ekliyoruz. Route.Config içerisine area kodunu ekliyoruz.
1.1)Admin Area için Layout oluþturuyoruz.
1.2)CRUD iþlemleri tüm entityler için controller'lar içerisine ekleniyor.
2)Helpers kalsöründeki ImageUploader sýnýfýný oluþtuyoruz(Bu sýnýf ile ürün ve product image ekleme iþlemlerimiz için path oluþturuyoruz)

-- UI/Member(AREA)

1)Member alanýnda Sepet(Cart), Checkout(sipariþ tamamlama), Register(Yeni üye kaydý) iþlemlerimiz için controller'lar oluþturuyoruz.
Sepet için ProductCart sýnýfýný models içerisine eklemeyi unutmayýnýz.

--API/NTier.AuthService

Referanslar = NTier.Core, NTier.Model, NTier.Service
1)Solution içerisine API projesini ekliyoruz.
2)Login.cshtml içerisine ekledðimiz ajax kodu ile kullanýcý bilgilerini API'ye gönderiyoruz.
3)API içerisindeki controller ile gelen verilere göre yönlendirme gerçekleþtiriyoruz.(ID bu aþamada url üzerinden iletilecektir ve UI-HomeController içeriisnde FormsAuthentiacion eklenecektir. Web.Config içerisine authentication için gerekli bölümü eklemeyi unutmayýn)
4)Logout için _Layout içerisine link ekliyoruz ve API içerisindeki controller'a yönlendirme yapýyoruz.
